#version 450
#extension GL_ARB_separate_shader_objects : enable


#define WORKGROUP_SIZE 16
#define SYGMA1 30
#define SYGMA2 20
#define RADIUS 5
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;
precision highp float;
precision highp int;
float w(uint, uint, uint, uint, uint);
float C(uint, uint, uint);

layout(push_constant) uniform params_t
{
  int WIDTH;
  int HEIGHT;

} params;

struct Pixel{
  vec4 value;
};

float weights[1000];
layout(std430, binding = 0) buffer buf {
  Pixel imageData[];
};

layout(std430, binding = 1) buffer buf2
{
   Pixel dstData[];
};

float w(uint row1, uint column1, uint row2, uint column2, uint i)
{
  return 1.f/(exp(pow(params.WIDTH * row2 + column2 - params.WIDTH * row1 - column1, 2)*1.f/(2*pow(SYGMA1, 2))) *
              exp(pow(imageData[params.WIDTH * row2 + column2].value[i] - imageData[params.WIDTH * row1 + column1].value[i], 2)*1.f/(2*pow(SYGMA2, 2))));
}

vec4 newColor(uint row, uint column) {
  vec4 newColor;
  newColor[3] = imageData[params.WIDTH * row + column].value.a;
  highp float resultValue;
  float c;
  uint currWeightCounter = 0;
  for (uint i = 0; i < 3; ++i) {
    c = C(row, column, i);
    currWeightCounter = 0;
    resultValue = 0.0;
    for (int j = int(row) - RADIUS; j <= int(row) + RADIUS; ++j) { // row
      for (int k = int(column) - RADIUS; k <= int(column) + RADIUS; ++k) { // num in row
        if ((j < 0) || (j >= params.HEIGHT) || (k < 0) || (k >= params.WIDTH)) {
          continue;
        } else {
            resultValue += imageData[params.WIDTH * uint(j) + uint(k)].value[i] * weights[currWeightCounter]/c;
            currWeightCounter++;
        }
      }
    }
    newColor[i] = resultValue;
  }
  return newColor;
}

float C(uint row, uint column, uint i)
{
  float resultValue = 0;
  uint currWeightCounter = 0;
  float currWeight = 0;
  for (int j = int(row) - RADIUS; j <= int(row) + RADIUS; ++j) { // row
    for (int k = int(column) - RADIUS; k <= int(column) + RADIUS; ++k) { // num in row
        if ((j < 0) || (j >= params.HEIGHT) || (k < 0) || (k >= params.WIDTH)) {
          continue;
        }   
        currWeight = w(row, column, uint(j), uint(k), i);   
        resultValue += currWeight;
        weights[currWeightCounter] = currWeight;
        currWeightCounter++;
    }
  }

  return resultValue;
}


void main() {

  if(gl_GlobalInvocationID.x >= params.WIDTH || gl_GlobalInvocationID.y >= params.HEIGHT)
    return;
  // store the rendered mandelbrot set uinto a storage buffer
  dstData[params.WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = newColor(gl_GlobalInvocationID.y, gl_GlobalInvocationID.x);
}