#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 16
#define SYGMA 25
#define STEP 14
#define RADIUS 3
#define PATCH 1
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;
precision highp float;
precision highp int;
float d(uint, uint, uint, uint);
float w(uint, uint, uint, uint);
float C(uint, uint);

layout(push_constant) uniform params_t
{
  int WIDTH;
  int HEIGHT;

} params;


struct Pixel{
  vec4 value;
};
float weights[1000];

layout (std140, binding = 0) buffer buf {
  Pixel dstData[];
};

layout (set = 0, binding = 1) uniform sampler2D imageSrc;


float d(uint row1, uint column1, uint row2, uint column2)
{
  float resultValue = 0;
  uint counter = 0;
  for (uint i = 0; i <= 2; ++i) {
    for (int j = -PATCH; j <= PATCH; ++j) { // row
      for (int k = -PATCH; k <= PATCH; ++k) { // num in row
          
        counter++;
        resultValue += pow(textureLod(imageSrc, vec2(uint(int(column1) + k), uint(int(row1) + j)), 0)[i] * 255.0f - textureLod(imageSrc, vec2(uint(int(column2) + k), uint(int(row2) + j)), 0)[i] * 255.0f, 2) / (3.f*counter*counter);
      }
    }
  }
  return resultValue;
}

float w(uint row1, uint column1, uint row2, uint column2)
{
  float maximum = max(d(row1, column1, row2, column2) - 2.0f*pow(SYGMA, 2), 0.0f);
  float height = pow(STEP, 2);
  return 1.f/exp(maximum * (1.f / height));
}

vec4 newColor(uint row, uint column) {
  vec4 newColor;
  newColor[3] = textureLod(imageSrc, vec2(column, row), 0)[3];
  highp float resultValue;
  float c = C(row, column);
  uint currWeightCounter = 0;
  for (uint i = 0; i < 3; ++i) {
    currWeightCounter = 0;
    resultValue = 0.0;
    for (int j = int(row) - RADIUS; j <= int(row) + RADIUS; ++j) { // row
      for (int k = int(column) - RADIUS; k <= int(column) + RADIUS; ++k) { // num in row
        resultValue += textureLod(imageSrc, vec2(uint(k) , uint(j)), 0)[i] * weights[currWeightCounter]/c;
        currWeightCounter++;
      }
    }
    newColor[i] = resultValue;
  }
  return newColor;
}

float C(uint row, uint column)
{
  float resultValue = 0;
  uint currWeightCounter = 0;
  float currWeight = 0;
  for (int j = int(row) - RADIUS; j <= int(row) + RADIUS; ++j) { // row
    for (int k = int(column) - RADIUS; k <= int(column) + RADIUS; ++k) { // num in row
          
        currWeight = w(row, column, uint(j), uint(k));   
        resultValue += currWeight;
        weights[currWeightCounter] = currWeight;
        currWeightCounter++;
    }
  }
  return resultValue;
}


void main() {

  if(gl_GlobalInvocationID.x >= params.WIDTH || gl_GlobalInvocationID.y >= params.HEIGHT)
    return;
  // store the rendered mandelbrot set uinto a storage buffer

  dstData[params.WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = newColor(gl_GlobalInvocationID.y, gl_GlobalInvocationID.x);
}